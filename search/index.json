[{"content":"绘画作品记录 某科学的超电磁炮 原神 电锯人（目前最爱作品） 莉克莉丝 黑岩射手 紫罗兰永恒花园 魔法少女小圆（也是很喜欢的作品！！） 葬送的芙莉莲（这个也超喜欢！！） 蜘蛛侠多元宇宙 一些杂图 持续更新中…… ","date":"2024-11-03T00:00:00Z","image":"https://vince-cyh.github.io/p/paintings/pawel-czerwinski-8uZPynIu-rQ-unsplash_hu6307248181568134095.jpg","permalink":"https://vince-cyh.github.io/p/paintings/","title":"绘画记录"},{"content":"回顾过去的思考 或许意识觉醒确实太晚了\n从大一遇上了恶劣的舍友，到疫情带来的仿佛一年的空白时光，再到最好的朋友离我而去，深陷抑郁情绪长达几乎一年无法自拔，我的大学生活似乎就被许多莫名其妙的事情打乱，自我调理情绪的同时还要应付大学课业和其他形式主义之类的事情，回想大学前两年，确实是相当黑暗的一段时间，不仅许多事情没有做好，还影响了大学的人际关系，虽说至少没有挂过科，但说真的，等我振作起来的时候，已经有点恍惚不知道该怎么样才好了。\n但我也不是完全没有规划，我从入学起就开始接触学校的acm社团，尝试结识一群志同道合的伙伴，梦想着从小白成长为大牛。我还加了几位学长的微信，希望得到老登对小登的成长建议，他们也非常愿意分享自己的见闻，总的来说，自己的大学开局或许真的不算差。\n滚滚而来的抑郁情绪一下子让我无心无力应付各种事情，只想让自己稍微放下一切，过的轻松一点。但是很多事情还是需要自己去承担：大学的心理学院找上了我，在经过一系列“治疗”之后，我意识到他们不过是在完成kpi；辅导员找上了我，但他似乎只是想确保我不会轻生，并没有给出处理我舍友的合理方案，也没有建议我去休学（我当时甚至都没有想到休学），然后在面谈的时候摆出一副“你这不是没什么事吗”的轻蔑嘴脸，让我好好继续学习。处于担心自己是不是在做作的心理，我也不愿意去看病，更不愿意到处诉说，只是把诸多没有答案的问题藏在心里自我消化。\n转眼间，肯定是落后同龄人许多了。我也是这时候才逐渐意识到中国教育体系是多么的不合理，尤其是计算机这个专业。我去听了一些国外的CS课程，才感受到国内外教育的差距：中国大部分的大学并不会育人，他们不会教你如何思考自己的一生，不会教你如何在这个行业更好地学习，而仅仅是遵循一系列指标把问题抛给学生，非常的不人性化。正是因为如此，绝大多数的优秀中国CSer都是靠着自学度过自己的大学四年的，他们甚至会建议你直接去听国外的课就完事了。\n至少在我的大学课程中，真正对我有帮助的课的学分，或许累积起来不超过10分吧，可想而知，如果一个人懵懵懂懂读到这个专业，若没有人告诉他这一些，他将浪费多少时间。\n而国内最抽象的地方或许也正是这里，人们并不会去责怪大环境，他们只会认为，你不懂得自学，你自己傻乎乎的，这完全是你的问题，更别说是经历和我类似的人了，无非就是你心智不成熟，还在学生思维，不去思考自己的人生巴拉巴拉……\n每个人都像是照着同一套模板一样活着，不然就会落后于同龄人，落入人海中浮沉。\n留给我们思考自己究竟想要什么的时间并不多，时间的压迫会催促你当下做出选择，即便你还没有条件去先尝试经历再做出选择。有多少人是真正思考过后才决定去读研呢，又有多少人就业的方向也是随着大众的选择呢，临近毕业这段时间，说不定你的选择完全是处于没有办法的办法，错过这一次秋招就是错过了，错过了这一次考试就失去应届生身份了，诸如此类，还有教务为了让你顺利毕业而不顾学生关键时期的安排，将各种毕业相关事宜提前，设置一个早的DDL，但又没有在更早的时候跟学生说清楚。无暇思考，仅仅是走在路上。\n为了更好地应对上述描述的问题，人们需要尽可能早的意识到自己该做什么，并且把日程提前，越早做成某些事，越有优势。但并不是每个人都可以很早的意识觉醒的，这里面的变量或许是一个人的成长环境、或许是思维方式、或许是身边的人、又或许是一个契机。人难免会往各个方向发展，只是在国内的教育体系下，一些人会显得更聪明、更成功罢了。\n重要的是当下能做什么 这片银河容得下任何可能性，人的命运不应该只有天上给予的那一条路。\n——雷电·忘川守·芽衣\n即便我现在过成了一个“大学玩了三年”的学生该有的样子，我也觉得我应该好好把握住剩下的时间和机会。\n再怎么说也是高考相对高分进来的，大学期间，也有稍微打过蓝桥杯竞赛，虽然只拿了个C++组国三，薅了点奖学金；也接触过后端开发的项目，只是当时钻研的并不深，直到准备秋招才开始深耕一个项目；也接触过游戏开发，用unity做了个仿宝可梦的游戏demo，拿了个高分；还帮外校的同学做过研究性大创项目，用python的爬虫爬取b站、百度等平台的相关数据，并将数据处理成可视化全国分布图、高频词的词云制作等，最后薅到他们学校2k的经费支持。\n这么想来，自己可能没有自己原本想的那么差，而就业的学长也纷纷表示，企业还是相当认可我们学校的计算机学生的。\n所以自七月份起，我开始准备起秋招该准备的东西，从笔试刷题，到项目，到八股，到简历。9月多开始投递，虽然期间有几个笔试自我感觉做的还不错的，却在十月份才有第一场面试。\n这个过程还是相当煎熬的，受到了不少打击，尤其是第一场面试，被狠狠拷打，但据说十月后的时间才是属于普通人的黄金时间，我所能做的只有保持良好的心态（9~10月稍微被打击到了有段时间有点摆烂），坚持学习坚持投递，保证机会到来的时候能够好好地把握住。\n刚好毕设也是构筑网站的方向，因此决定开始维护自己的个人博客，记录想法，记录学习，不求以后能成为多么厉害的大牛，甚至不求自己能够真的入行，只求自己的想法不是世间虚无的泡影，而是能被记录下来，自己也能问心无愧。\n就算结局早已注定，那也无妨，人改变不了的事太多。\n但在此之前，在走向结局的路上，我们能做得到的事同样很多。\n而结局…也会因此展现截然不同的意义。\n这便是旅途的含义。\n那美丽的事物从前如此，现在亦然，而我同样相信\n它会在虚无的尽头依旧盛放，直到我们在阳光下重逢\n——雷电·忘川守·芽衣\n","date":"2024-11-02T00:00:00Z","image":"https://vince-cyh.github.io/p/a-good-begging/helena-hertz-wWZzXlDpMog-unsplash_hu4699868770670889127.jpg","permalink":"https://vince-cyh.github.io/p/a-good-begging/","title":"一个好的开始"},{"content":"游戏简介 The Unseen World是一款具有深刻社会意义的2D角色扮演游戏，旨在通过模拟视障人士的生活体验，让玩家从第三人称视角感受他们的日常挑战和内心世界。游戏设计的核心在于教育和启发，通过沉浸式的互动，我们希望提升公众对视障群体的理解、同情以及对必要辅助设施的意识。\n游戏的可运行文件可以通过下载链接下载体验。\n游戏效果展示 开始菜单：显示游戏标题、背景以及进入游戏、教程按钮和退出游戏按钮，按钮默认选中进入游戏按钮，可以通过鼠标也可以通过键盘进行选择。\n引导场景：玩家与NPC进行对话，获取游戏操作提示。\n过渡场景：文字以打印的效果呈现在屏幕上，讲述游戏背景和关卡指引。\n马路场景：玩家通过声音提示通过马路，在成功和失败的情况下都有相应提示。\n主场景：玩家视野受限，可自由探索地图，与地图交互，进行对战或与NPC对话。HUD显示玩家当前等级与血量。其中，玩家的视野范围和等级挂钩，等级越高，视野范围越广，象征着玩家在体验盲人生活的过程中经历重重苦难，逐渐获得视野，从而理解盲人。\n场景内有很多可以互动的人和物品，他们的头顶都标有感叹号，玩家可以按Z键与NPC互动，也可以和告示牌互动查看一些重要的讯息，感叹号也会在互动后消失。\n玩家走到伤害区域掉血，可通过拾取道具回血。\n玩家会在不同的情景遇到不同的敌人，在草地遇到螳螂，遇到惹事的坏人npc，甚至会遇到欺骗玩家去打开的宝箱怪，触发回合制战斗。\n玩家触发对战：可选择不同策略应对，包括不同攻击效果，切换角色与逃跑。其中，玩家的血量是与地图血量同步的，任意一个场景的主角在血量为0时直接游戏失败。\n可以切换战斗角色，不同角色有不同的专长，通过不同角色的攻击配合可以增加战斗效率。\n招式主要分为控制类技能、直伤技能和特攻技能，有些招式是上述三种类型的组合效果，有的既能打出控制延缓敌人行动又能回合内出伤，也有的既能为敌人挂上负面效果又能打出伤害。在使用招式时，会触发角色行动动画。\n在任意一方的回合内，若存在负面效果，会通过画面下面的方框打印状态信息，若该负面效果会对该对象造成伤害，也会同步更新血条变化的动画。\n双方入场时会播放入场动画，当任意一方倒下时也会播放对应的退场动画。\n战斗结束后，当前场上的角色会获得经验值，经验值达到下一等级所需的经验就会升级并触发升级音效，同时经验条会回退到0重新开始。若当前场上获胜的不是主角而是她的队友，主角还会在队友获得完经验值后也换到场上来获得等量的经验值。另外，升级以后血量会回复到满血。\n玩家达到一定等级后，视野范围变到最大，游戏通关，显示通关界面，游戏结束。\n若玩家血量消耗完，显示失败界面。\n游戏设计思路 游戏玩法设计 在这款2D横板角色扮演游戏中，玩家将扮演一位盲人角色，体验独特的冒险旅程。游戏开始于一个简洁的开始菜单，提供新游戏和退出选项。进入游戏后，玩家首先会经历一个引导场景，学习如何移动和进行键盘控制等基本操作。\n接着，玩家将面临第一个关卡：马路场景。在这里，玩家需要仔细聆听交通信号灯的声音，找到安全的过马路时机。\n随后，玩家将进入主场景，这是一个开放的世界，玩家可以自由探索，与NPC进行对话，获取任务和信息。在探索过程中，玩家可能会遇到各种障碍和困难。\n当玩家遇到敌人时，将进入战斗场景。这是一个回合制的战斗系统，玩家需要通过合适的策略，进行反击或躲避。玩家也可以与同伴一起进行战斗，获取经验升级。\n如果玩家成功克服所有挑战，将达到成功通关的等级。如果玩家在某个环节失败，比如在战斗中被击败或未能完成特定任务，游戏将进入游戏失败的场景，玩家可以选择重新开始。\n游戏系统设计 游戏主要分为两大系统：世界探索系统和战斗系统。\n世界探索时，由PlayerController进行玩家操作的更新；在战斗时，由BattleSystem进行玩家操作的更新。\n在世界探索的过程中，会遇到部分地形能够触发战斗，屏幕视角便会转向战斗场景，进入回合制战斗。\n此时游戏操作由BattleSystem的HandleUpdate函数进行更新，不会影响主世界人物的移动。\n若战斗结束，将切换回主世界的Main Camera，并由PlayerController接管玩家操作的更新。\n此时由PlayerController的HandleUpdate进行操作的更新，玩家能够继续进行世界的探索，自由移动。\n游戏场景设计 游戏采用2D像素风格地图，地图是由瓦片素材堆叠而成的。\n首先将素材切割成瓦片调色板：右键点击素材图片，选择Create-\u0026gt;2D-\u0026gt;Tile Palette创建瓦片调色板。\n在调色板中选择合适的瓦片大小进行分割。\n在菜单栏中选择Window-\u0026gt;2D-\u0026gt;Tile Palette调出调色板窗口，这时可以用瓦片调色板对TileMap类型的对象进行编辑。\n游戏的地图分两个层级：Background图层位于最下方，只起到背景的作用，不影响游戏逻辑。SolidObject图层除了背景功能，还添加了碰撞信息，用来限制角色的移动。\n对SolidObject图层添加Composite Collider 2D，可令图层上的瓦片具有碰撞属性。\n在主场景中，由于涉及到交互对象的判断还有触发战斗的地形，我们添加了其他的功能性Layer，例如InjureLayer，NPCLayer等。\n各种地形画在不同的层级中，分布在地图的各个角落。\n草地地形用于触发回合制战斗。\n骷髅地形用于扣除玩家的血量。\n还有地图上分布各地的水果，用于为玩家回复血量，它们属于水果图层。\n地图上分布各地的还有告示牌、NPC、宝箱等交互场景，属于互动层。\n下面是一些主世界的其他场景设计，暂时只有美观作用，以后可以进一步开发功能。\n游戏角色设计 PlayerController脚本负责处理角色移动。玩家可以通过键盘的W, A, S, D和方向键控制角色移动。\n脚本的HandleUpdate函数通过Input.GetAxisRaw(\u0026quot;Horizontal\u0026quot;)和Input.GetAxisRaw(\u0026quot;Vertical\u0026quot;)获取玩家的输入，分别对应水平和垂直方向。如果同时按下水平和垂直方向键，将垂直输入置为0，以避免对角线移动。计算出玩家想要到达的新位置targetPos。\n使用IsWalkable(targetPos)方法检查目标位置是否有障碍物。如果目标位置可行走，通过协程Move(targetPos)平滑地移动玩家到目标位置。\nIsWalkable方法是用来检查targetPos是否被solidObjects图层的障碍物占据。OverlapCircle方法检测在targetPos位置是否有solidObjects图层的物体与周围0.3的圆形区域重叠。如果检测到了障碍物，则目标位置不可行走，这样就添加了碰撞效果。\n角色移动是由协程实现的。协程在移动过程中会不断检查是否已经足够接近目标位置，如果已经非常接近，则将对象的位置直接设置为目标位置，并结束协程。在整个移动过程中，isMoving变量被设置为true。\n游戏音乐设计 我们利用Unity引擎的音频系统创建了丰富的环境声音，包括背景音乐和音效。\n背景音乐根据场景设置，有自由探索地图时的舒缓背景音乐，还有战斗场景传达激烈紧张氛围的背景音乐。在玩家与地图互动时，例如拾取物品和收到伤害，会有相应的音效提示，增加了游戏的沉浸感。\n为了辅助玩家导航，我们设计了特定的导航声音提示，如马路场景的交通信号声音。\n添加背景音乐：创建一个Audio Source Component，作为背景音乐的容器。\n把项目面板中的音乐文件拖动至AudioClip中，勾选Play On Awake，开始时播放。同时勾选loop，循环播放。\n在脚本中获取这个AudioSource，并在触发特定效果时播放。\nPlay()和Stop()控制音乐播放。\nPlayOneShot()可以在同一个时间播放多种AudioClip。\n其中，拾取音效等短音频需要使用Audio Clip存储，并从Resources文件夹读取出来，通过控制音频文件的脚本中的函数，使用AudioSource.PlayOneShot播放。\n而部分背景音乐通关脚本控制，获取场景中的音频对象，通过SoundManager脚本进行控制播放，例如人物从走路到触发战斗就需要通过这一点改变背景音乐。\n音乐风格主要设计为轻缓柔和与激昂紧凑两种风格，在探索地图的适合，风格轻缓，在进入回合制战斗以后，音乐风格切换为激昂。而游戏失败则采用低沉忧郁的音乐风格，游戏通关则是欢快的音乐风格。\n游戏美术元素设计 设定上，玩家需要扮演一个盲人进行世界的探索，在探索的过程中体验盲人生活的艰辛。因此我们选择乡镇风格的美术设计，不仅能够反映出盲人在一般环境下的艰辛，还能模拟盲人因看不见路误入危险区域的情景。\n而主角作为一个盲人，形象需要符合乡村气息，同时又手无缚鸡之力，因此我们选择形象如下。\n主角的初始伙伴则是三位风格迥异的少女，\n游戏中遇到的敌人包括RPG风格常见的战士，\n也包括昆虫树精一些大家常常认为森林中会出现的怪物：\n战斗的场景其实准备了适配不同区域的背景，不过由于开发进度只使用到了草地战斗场景，\n游戏菜单界面，采用符合像素风格的背景图片和简约的UI设计，图片内容稍显阴沉，采用暗色调，让玩家马上带入了对盲人话题的思考。\n游戏中，玩家视距很小，从而体验到盲人生活的艰辛。在不断克服困难升级的过程中，玩家的视野逐渐明朗，因此通关界面设计成一种重见光明的感觉。\n游戏文案设计 游戏中的文案分为日常场景和战斗场景，日常场景中添加文案的方法主要是通过给可交互对象附加NPC Controller脚本实现的，这个脚本用来管理任何地图上可交互对象的行为，包括与玩家的交互和对话，\n\\[SerializeField\\]使文本内容可在 Inspector 中显示和编辑：\nDialogManager 脚本则是管理对话框的显示和对话文本的逐字显示效果，包括延时和打字机效果等等：\nDialogBox对象的UI则是这样设计的，日常文本都会被显示在这里：\n这样，当我们想要给一个NPC添加对话文本时只需要将Layer设为NPC，\n并且拖入NPC Controller脚本设置文本即可，每一个element代表一段对话。\n战斗部分的文本不同于日常文本，内容都是直接在代码里设置的。起到和DialogManager同等作用的是BattleDialogBox，他要负责很多不同位置文本对象的显示：\n游戏动画设计 设计角色移动动画：\n在 Inspector 中，单击Add Component 按钮并添加 Animator 组件。\n在文件夹中，右键单击并从上下文菜单中选择 Create \u0026gt; Animator Controller，添加到角色预制件上的 Animator 中。\n选择 Window \u0026gt; Animation \u0026gt; Animation 打开 Animation 窗口。\n将素材拖放到 Animation 窗口中。此时将使用四个spirit来创建一段动画。\n将 Samples 值设置为 6 即可使动画每秒仅更改 6 次.\n创建动画，窗口左上方的当前动画名称，选择 Create New Clip。对其他奔跑方向的动画重复上述操作。\n编辑 Controller，选择菜单：Windows \u0026gt; Animation \u0026gt; Animator。\nAnimator 分为两个部分，左侧是 Layers 和 Parameters，右侧是Animation State Machine。\n选择 Create State \u0026gt; From New Blend Tree，使用混合树，可以根据参数来混合多段动画。\nBlend Tree 使用两个参数来控制水平和垂直方向的更改，因此将 Blend Type 设置为 2D Simple Directional。添加参数 Move X 和 Move Y。\n将四段动画剪辑拖放到名为 Motion 的四个字段中，并将各个 Pos X 和 Pos Y 值设置为相应的方向，如下所示：\nLeft：Pos X = -1 Pos Y = 0\nRight：Pos X = 1 Pos Y = 0\nUp：Pos X = 0 Pos Y = 1\nDown：Pos X = 0 Pos Y = -1\n该图像表示混合，其中每个蓝色菱形表示一个剪辑，红色点是由 2 个参数的值给出的位置。\n将参数发送到 Animator Controller：通过 Animator 上的 SetFloat 函数将参数值发送到 Animator。\n设置过渡条件：从Idle状态到Walk状态的条件是isMoving为true，反之亦然。\n在PlayerController脚本中设置这个布尔变量。\n游戏场景实现 开始/结束菜单 开始菜单主要由背景图片、标题和按钮组成。\n创建一个Canvas用于构建整体画布，再在Canvas中创建Panel并重命名为Main Menu，用于布置标题和按钮等物件。\n其中，进入游戏按钮和退出游戏按钮的方法需绑定在Menu脚本里。\n接着将Menu脚本拖动到Canvas的组件中，然后在button的onclick选项中选择Canvas下的Menu类中的函数方法。\n为了按钮效果更加直观且美观，可以为按钮范围的基底选一个浅黄色的色调。并将按钮本身的常态颜色设置为完全透明，而高亮、选择和取消选择为半透明，按下按钮后为1/4透明。\n对于教程按钮，选择再建立一层Canvas用于覆盖到原来的Canvas之上，上面显示教程内容，然后通关按钮触发该Canvas的关闭和打开。\n建立一个TutorialManager脚本用于控制教程界面的打开与关闭，并应用到对应的button上。\n为了让按钮能够被键盘操作，还需要另外将初始选中按钮拖动到EventSystem中，例如让进入菜单页面的时候，开始游戏显示为被选中但未按下的状态。\n但是万一鼠标不小心点到了按钮之外的地方，选中就会丢失，因此还需要一个脚本控制按钮的初始化以及重置。编写该脚本，命名为initButton。\n在脚本中，不断更新最后选中的GameObject，保证无论当前选中的是哪个按钮，在丢失选中对象时，可以通过Update更新回来。而在前面的步骤中已经将PlayButton选作初始选中的按钮，因此第一次更新lastSelect对象即为开始游戏按钮对象。\n最后需要将initButton脚本应用到Panel中，即我们工程列表中的Main Menu。\n结束菜单基本同理，只需要选择好LoadScene的参数即可，实现按钮跳转到合理的对应场景。\n其中，我们的场景序号分布如下图所示。每次需要更新新的场景，需要打开File -\u0026gt; Build Settings进行场景的管理，点击Add Open Scenes将当前正在编辑的场景加入到场景列表中。\n由于游戏结束需要区分游戏通关以及游戏失败，需要制作两个结束菜单。\n游戏通关\n游戏失败\n两个菜单的场景中都创建了音频对象，用于播放对应情境的音乐。设置为进入场景时就播放，仅播放一次。\n引导场景 引导场景包括指引文本和NPC，文本绑定在NPC对象上，通过角色的射线检测触发。\n文本采用微软雅黑以显示中文。\n在NPC脚本中定义对话框成员和对话框队列，并将对话框对象拖动至unity的inspector中。\n初始化时，令对话框进入队列中，并通过SetActive(false)令其不显示。\nupdate函数播放所有对话框，通过计时器来控制播放时间。在一个计时周期结束时，如果队列dialogBoxes中还有未播放的对话框，当前对话框将被隐藏，计时器重置，然后队列中的下一个对话框被激活显示。如果队列为空，播放状态将被设置为结束。\nDisplayDialog方法播放第一个对话框，设置对应布尔变量，update函数就会执行对话框的依次显示。如果对话框已经播放完毕，会跳转到下一场景。\nNPC的对话框由玩家的射线触发。Raycast方法从角色的rigidbody2D位置向上偏移0.2个单位发射一个射线。射线的方向是lookDirection，长度为1.5，并且只检测标记为\u0026quot;NPC\u0026quot;层的物体。如果玩家与NPC的距离在射线范围内，通过hit.collider.GetComponent\u0026lt;NonPlayerCharacter\u0026gt;()从被击中的物体中获取NonPlayerCharacter组件，调用DisplayDialog方法来显示对话。\n马路场景 马路场景通过RoadController组件控制，包括文本框和导航音效。把对应的组件拖动至RoadController中。\nRoadController设置播放两段音频的间隔为7秒，比玩家通过马路的用时稍长。\nStart函数初始化AudioSource成员，获取玩家起始坐标。\n在update函数中，计时器控制播放时间，每隔7秒转换马路状态，并控制对应的音频播放。\nupdate函数也实时检测玩家的y坐标，如果在不允许过马路的状态下，玩家位置在马路上（0-17），则重新加载此场景，如果玩家坐标大于17（通过马路），则加载下一场景。\n在加载场景前，显示对应的文本框，提示玩家通过或失败，然后等待两秒才跳转。\n主场景 主场景涉及到物体碰撞的判定、战斗事件的触发、交互层的互动、玩家视野限制、等级与视野范围的联动、玩家血量修改、主场景和战斗场景血量的一致性等。\n关于物体碰撞的判定，我们创建了两个Layer，BackgroundLayer和SolidLayer，能够让玩家走上去的场景画在背景层，需要判定碰撞的画在SolidLayer层。接下来在场景中创建两个Rectangular的TileMap对象，分别命名为Background和SolidObjects，用于存放绘制的背景图层和碰撞体图层。\n其中，碰撞体层需要在添加TileMap Collider 2D组件的基础上，进一步添加Composite Collider 2D组件用于复杂场景的碰撞体积判断。添加完后，会自动添加一个Rigidbody 2D组件，为了让碰撞体在地图上静止，需要修改Body Type为Static保持静态。同时需要将Tilemap Collider 2D中的Used By Composite勾上，以便能够使用复杂碰撞体的相关性质，最后将Composite Collider 2D中的Geometry Type修改为Polygons，使用多面体进行碰撞边缘的描绘，使复杂场景的碰撞更加合理。\n接着需要编写PlayController脚本用于控制人物行走，并且根据前方是否是SolidObject层来判断能否继续往前走。\n战斗场景我们决定使用草坪地形来触发，实现方式即是创建一个名为LongGrass的图层和GameObject，用于存放绘制的草地地形。同solidObject的设置，只是在isWalkable函数中不对grassLayer进行判断，因此人物可以走到草地上，但是却能通过OverlapCircle判断到碰撞体。利用这一点，编写一个CheckForEncounter函数，用于判断是否进入草丛，并设置百分之十的概率触发战斗事件，并让主场景的人物暂停移动。\n接着需要编写GameObject脚本，用于控制当前场景的多个游戏状态，这里先仅描述对主场景人物移动触发战斗事件的响应。\n在Start函数中，实现对后续所需事件的响应功能，例如战斗触发事件、NPC交互事件、战斗结束事件，以及对话框触发和关闭事件。\n其中，对战斗触发事件的响应以及特定NPC触发战斗事件将调用GameController中的StartBattle函数，对战斗结束事件的响应调用EndBattle函数。\n为了做到同一个Scene存在两个画面，需要另外创建一个GameObject命名为BattleSystem用于战斗画面的布景配置，同时BattleSystem也存在一个Camera，因此在转换主世界场景和战斗场景的适合，只需要将相关的gameobject打开或关闭即可。\n同时，由于情景转变，键盘控制的对象也应该改变，因此需要在GameController中分配不同情景下的更新模式。\n互动层也被视作不可碰撞的层，同时需要玩家通过按键\u0026quot;Z\u0026quot;进行交互，触发对应的功能。\n告示牌、可对话的NPC都绑定了一个感叹号作为子物件，若在玩家进行互动对话后，需要在对话结束后将感叹号清除。\n首先实现交互层的判定，在PlayController的移动函数中，添加对按键\u0026quot;Z\u0026quot;按下的响应，调用interact函数。\n在interact函数中，对互动的物件进行判断，由于不同互动的物件可能需要触发不同的功能函数，因此再次对物件的名字进行特判，触发相应的功能函数。\n接下来编写NPCController用于实现NPC等交互层对象的功能函数实现。其中，交互的NPC对象将传入是否进行对战的参数，这个参数可以在场景编辑界面对应的NPC对象的组件中进行编辑即可，部分NPC的交互会在对话后触发战斗。不论哪种，都需要在对话结束后检查交互对象是否有绑定感叹号物件，若有，则需要将其绑定的子对象一一删除，实现对话后清空叹号的效果。\n交互触发战斗部分采用协程的函数调用方式，目的是为了让对话框等讯息结束后再触发后续功能及操作，否则功能会并发执行，引发一定程度的混乱，例如在还没看到对话框内容就进入了战斗，或者交互后交互对象直接被Destroy函数消除。\n接着编写DialogManager脚本，用于交互NPC或者告示牌时，逐段打印显示的字幕。\n若没有特殊情况，脚本将从组件中获取Dialog对象，将用于展示字幕的dialogBox对象在场景中设置为打开，并且从dailog的第一条字段开始打印，打印过程是打印机效果。\n其中，组件中获取到的Dialog如下图所示，若需要多段语句的打印，只需要点击\u0026quot;+\u0026ldquo;并且输入后续内容即可。\n打印字段函数如下所示，使用了协程方法，方便在显示每个字的时候通过WaitForSeconds函数控制字间时长，同时也能保证在完全打完Dialog包含的字段前不会进行后续操作。\n后续字段的打印通过DialogManager的HandleUpdate函数实现，在打印完一段字段后，变为停止打字的状态，方便玩家阅读文本内容，若玩家按下\u0026quot;Z\u0026quot;键则推进后续文本的打印。当计数变量计算到当前打印字段不是Dialog的最后字段，便继续往下打印；否则，关闭对话框并通过布尔变量isEnd控制后续操作的进行，并传递关闭对话的事件。\n为了让玩家在主世界中更有盲人的代入感，我们考虑引入视野机制，让玩家可见范围很小。为了实现这一点，需要在Player \u0026gt; Main Camera下创建一个Light 2D对象，调节其Light 2D组件数据如下图所示。\n将能见范围对象设置为Everything，便可以做到所需的视野范围效果，此时人物视距如下图所示。\n在对战系统中，我们还引入了经验以及等级机制，为了体现玩家在体验盲人的过程中不断克服困难最后重获光明，考虑将等级与视野范围进行绑定联动。玩家每提升一个等级，便能提升一定量的视距，即Light 2D组件中的FallOff值。当FallOff值到达一定程度，玩家便通关。\n因此编写PlayerLightController用于获取Light 2D对象并实现对应函数功能修改Light 2D组件数值。\n首先通过子对象路径直接查询并获取Light 2D对象，并调用LightManager类进行初始化。\n下面编写LightManager类，这是一个静态类，方便其他脚本文件调用其中的函数方法。其中包含了初始化赋值、增加视距FallOff以及判断视距是否达到通关条件的方法。\n接下来实现主世界的玩家Hud显示名字、血量和等级，同时完成主世界影响玩家血量的相关机制。\n由于战斗系统中已经创建了Hud模板，因此在主世界中可以将模板应用到UI层上，这样Hud的位置可以永远保持在屏幕左上角随着玩家移动而不变。\n接着编写RPG UI的脚本文件，为Hud填充相关信息。\n在Start函数中，从战斗系统中读取玩家的数据，并初始化为满血，同时同步数据到Hud上用于显示姓名、血量以及等级信息。\n接着还需要在Update函数中，实时同步玩家数据信息，若玩家在某些会受伤的地形掉了血，或者是在战斗中损失了血量，都需要实时更新同步到主世界的Hud上。同时，编写游戏失败的判定，在血量小于等于0时，跳转到GameOver场景。\n这样，在探索主世界的过程中，左上角的Hud永远都能同步玩家状态并显示出来。\n接着，实现主世界影响玩家血量的机制。\n创建Injury层，用于让走上去的玩家掉一定量的血。\n在PlayerController里，添加走路时对Injure地形的特判，若玩家踏入该地形，有百分之十的概率会扣除一定量的血量，需要调用RPG UI里的对应方法。\n接下来在RPG UI脚本中实现扣血的对应方法。获取到玩家数据以后，通过Mathf.Clamp将扣除以后的血量控制在0~MaxHP之间，同时更新Hud显示的血量。\n还考虑加入主世界中回血的机制，通过拾取地上的水果，玩家可以恢复一定量的血量，并同步更新到玩家数据以及Hud中。\n创建水果的GameObject，命名为Strawberry，应用到Fruit层，并为其创建预制体。\n接着，需要为其添加Box Collider 2D组件，并修改默认添加的RigidBody组件为Static，让其静止存放在地图上，还需要勾选上Is Trigger选项，让其可以被玩家穿过而不会卡住。\n在PlayerController中添加CheckForFruit方法，判断玩家是否碰撞到了水果。若碰撞到了，首先获取碰撞到的对象，调用RPG UI中的恢复方法。若成功回血，则将该水果对象销毁，并播放拾取音效。\n完善RPG UI中恢复血量的相关方法。若玩家当前血量不是满血，则可以进行回复，回复一定血量后，同步到玩家数据中，并且同步更新到Hud上显示最新玩家数据信息。\n对战场景 战斗场景主要涉及到战斗的触发和结束条件、角色的属性经验等级、招式的属性类型、队伍内部切换角色等。\n战斗的触发上文已有提到是通过PlayerController中主角和草地的碰撞实现的，这里有一个设计是不同区域可遇到的怪是不同的，MapArea脚本里实现了随机遇敌的逻辑：\n有了这个脚本，我们就能自定义怪物表和等级，只要再在player控制器那里加上特定的碰撞对象判断就能完美实现随即遇敌的逻辑了：\n整个战斗都是在BattleSystem控制下的，战斗结束自然不例外。我们需要检查战斗是否结束，并根据不同的条件触发相应的结束逻辑，我在很多位置都加了战斗结束的检查，每次都会传入敌我unit，当主角即列表第一个死亡时就会立刻结束战斗，若死的不是主角而是队伍中的一员时则会开启小队界面切人接着打（当队伍只剩主角活着的时候也是游戏结束）：\n如果死亡的单位是敌人，那么会立刻进入到经验结算环节，在当前角色吃完经验后还会切换主角上来再吃一次，同时会清除角色状态防止暴毙，最后BattleOver传入true战斗结束。\n角色的属性经验等级等基础属性都是在PokemonBase.cs里实现的，比如名称、类型、基础HP等，\n每个角色的升级速度也是不同的，这里分快和中快俩种：\nPokemon.cs管理宝可梦的动态属性，比如当前HP、经验值、当前等级、战斗时的状态、状态时间、效果提升、等级提升等等，因为代码实在太长就不全放了：\n如果要创建一个新角色也可以通过之前提到的方法直接在Resources/Pokemon直接创建新角色，\n招式的创建和之前角色创建有一些类似，在MoveBase中加了创建招式的快捷方式和定义了招式的基础属性，比如名称、类型、威力、命中率等。\n招式类型分三种，物攻魔法状态，物攻和魔法的伤害是关于角色的攻击和特攻属性的，而状态就不是了，同时招式还有Stat相关的，作用是增幅自己或敌人的五维属性：\n状态攻击的效果通过Condition和ConditionDB实现，Condition.cs定义了状态效果的行为\nConditionDB.cs这个脚本存储所有状态效果的数据，包括战斗前判定的睡眠和冻结等状态，还有战斗后判定的中毒烧伤等等:\n物攻和魔法攻击的伤害计算则是在TakeDamage中实现，每次攻击还有10左右概率暴击，\n然后我们就能设计效果各异的Move并放入不同角色的技能列表里了：\n{width=\u0026ldquo;3.8020833333333335in\u0026rdquo; height=\u0026ldquo;3.163875765529309in\u0026rdquo;}\n角色切换我是首先在战斗画布里画了角色显示的UI，\n然后写了一个脚本管理玩家的角色队伍，包括获取当前角色，\n在这个PartyScreen.cs脚本管理队伍界面的显示和交互。当玩家需要切换角色时，显示队伍界面供玩家选择。\n这个脚本管理队伍界面中每个角色的UI显示。\n最后在BattleSystem中设置开启小队列表UI方法的位置：\n","date":"2024-03-01T00:00:00Z","image":"https://vince-cyh.github.io/p/the-unseen-world-demo/title_hu10664154974910995856.jpg","permalink":"https://vince-cyh.github.io/p/the-unseen-world-demo/","title":"The Unseen World 游戏开发"}]